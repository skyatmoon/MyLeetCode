class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if (not nums) or (len(nums)<3):
            return []
        else:
            nums.sort()
            length = len(nums)
            res = []
            for i in range(length-2):
                if nums[i] > 0: 
                    break
                if i > 0 and nums[i] == nums[i-1]: 
                    continue 
                l, r = i+1, length-1 
                while l < r:
                    t = nums[i]+nums[l]+nums[r]
                    if t < 0:
                        l += 1
                    elif t > 0:
                        r -= 1
                    else: 
                        res.append([nums[i], nums[l], nums[r]])
                        while l < r and nums[l] == nums[l+1]:
                            l += 1
                        while l < r and nums[r] == nums[r-1]:
                            r -= 1
                        l +=1
                        r -= 1
            return res
                    
                    
Runtime: 556 ms, faster than 93.44% of Python online submissions for 3Sum.
Memory Usage: 16.7 MB, less than 82.44% of Python online submissions for 3Sum.
03/23/2021 20:32	Accepted	556 ms	16.7 MB	python
